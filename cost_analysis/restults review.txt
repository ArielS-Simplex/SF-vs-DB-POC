QUERY_ID	WAREHOUSE_NAME	QUERY_TEXT	RUNTIME_SECONDS	RUNTIME_MINUTES	CREDITS_USED	COST_USD	START_TIME	EXECUTION_STATUS
01bf1097-0000-31b0-002c-770b0011c48a	X_SMALL_2_GEN	CREATE TABLE IDENTIFIER($TARGET_TABLE) AS
WITH deduped_bronze AS (
    SELECT 
        *,
        ROW_NUMBER() OVER (
            PARTITION BY TRANSACTION_MAIN_ID, TRANSACTION_DATE 
            ORDER BY inserted_at DESC
        ) AS rn
    FROM IDENTIFIER($SOURCE_TABLE)
    WHERE DATE(transaction_date) >= $DATE_RANGE_START
      AND DATE(transaction_date) <= $DATE_RANGE_END
      AND transaction_main_id IS NOT NULL 
      AND transaction_date IS NOT NULL
      AND LOWER(TRIM(multi_client_name)) NOT IN (
        'test multi', 
        'davidh test2 multi', 
        'ice demo multi', 
        'monitoring client pod2 multi'
      )
),
filtered_data AS (
    SELECT * FROM deduped_bronze WHERE rn = 1
),
status_flags_calculated AS (
SELECT 
    -- Keep all original columns
    *,
    
    -- DATABRICKS DERIVED COLUMNS - Transaction result status flags (FIXED CASE SENSITIVITY)
    CASE 
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'INITAUTH3D' AND TRIM(COALESCE(transaction_result_id, '')) = '1006' THEN TRUE
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'INITAUTH3D' THEN FALSE
        ELSE NULL
    END AS init_status,
    
    CASE 
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'AUTH3D' AND TRIM(COALESCE(transaction_result_id, '')) = '1006' THEN TRUE
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'AUTH3D' THEN FALSE
        ELSE NULL
    END AS auth_3d_status,
    
    CASE 
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'SALE' AND TRIM(COALESCE(transaction_result_id, '')) = '1006' THEN TRUE
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'SALE' THEN FALSE
        ELSE NULL
    END AS sale_status,
    
    CASE 
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'AUTH' AND TRIM(COALESCE(transaction_result_id, '')) = '1006' THEN TRUE
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'AUTH' THEN FALSE
        ELSE NULL
    END AS auth_status,
    
    CASE 
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'SETTLE' AND TRIM(COALESCE(transaction_result_id, '')) = '1006' THEN TRUE
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'SETTLE' THEN FALSE
        ELSE NULL
    END AS settle_status,
    
    CASE 
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'VERIFY_AUTH_3D' AND TRIM(COALESCE(transaction_result_id, '')) = '1006' THEN TRUE
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) = 'VERIFY_AUTH_3D' THEN FALSE
        ELSE NULL
    END AS verify_auth_3d_status,
    
    -- DATABRICKS DERIVED COLUMNS - Conditional copies
    CASE 
        WHEN LOWER(TRIM(COALESCE(transaction_type, ''))) = 'auth3d' THEN CASE 
            WHEN LOWER(TRIM(COALESCE(is_sale_3d, ''))) IN ('yes', 'true', '1') THEN TRUE
            WHEN LOWER(TRIM(COALESCE(is_sale_3d, ''))) IN ('no', 'false', '0', '') THEN FALSE
            ELSE NULL
        END
        ELSE NULL
    END AS is_sale_3d_auth_3d,
    
    CASE 
        WHEN LOWER(TRIM(COALESCE(transaction_type, ''))) = 'auth3d' THEN CASE 
            WHEN LOWER(TRIM(COALESCE(manage_3d_decision, ''))) IN ('yes', 'true', '1') THEN TRUE
            WHEN LOWER(TRIM(COALESCE(manage_3d_decision, ''))) IN ('no', 'false', '0', '') THEN FALSE
            ELSE NULL
        END
        ELSE NULL
    END AS manage_3d_decision_auth_3d

FROM filtered_data
)

SELECT 
    -- Core transaction fields
    transaction_main_id,
    transaction_date,
    
    -- Boolean normalization - EXACT Databricks logic using actual columns
    CASE 
        WHEN LOWER(TRIM(COALESCE(is_void, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(is_void, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS is_void,
    
    CASE 
        WHEN LOWER(TRIM(COALESCE(is_sale_3d, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(is_sale_3d, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS is_sale_3d,
    
    CASE 
        WHEN LOWER(TRIM(COALESCE(is_external_mpi, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(is_external_mpi, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS is_external_mpi,
    
    CASE 
        WHEN LOWER(TRIM(COALESCE(is_prepaid, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(is_prepaid, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS is_prepaid,
    
    CASE 
        WHEN LOWER(TRIM(COALESCE(is_3d, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(is_3d, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS is_3d,
    
    -- DATABRICKS DERIVED COLUMNS - Reference calculated status flags
    init_status,
    auth_3d_status,
    sale_status,
    auth_status,
    settle_status,
    verify_auth_3d_status,
    
    -- DATABRICKS DERIVED COLUMNS - Conditional copies (from CTE)
    is_sale_3d_auth_3d,
    manage_3d_decision_auth_3d,
    
    -- DATABRICKS DERIVED COLUMNS - 3D Secure success analysis (FIXED CASE SENSITIVITY)
    CASE 
        WHEN UPPER(TRIM(COALESCE(threed_flow_status, ''))) = '3D_SUCCESS' THEN TRUE
        WHEN UPPER(TRIM(COALESCE(threed_flow_status, ''))) IN ('3D_FAILURE', '3D_WASNT_COMPLETED') THEN FALSE
        ELSE NULL
    END AS is_successful_challenge,
    
    CASE 
        WHEN UPPER(TRIM(COALESCE(authentication_flow, ''))) = 'EXEMPTION' THEN TRUE
        WHEN UPPER(TRIM(COALESCE(challenge_preference, ''))) = 'Y_REQUESTED_BY_ACQUIRER' THEN FALSE
        ELSE NULL
    END AS is_successful_exemption,
    
    CASE 
        WHEN UPPER(TRIM(COALESCE(authentication_flow, ''))) = 'FRICTIONLESS' AND TRIM(COALESCE(status, '')) = '40' THEN TRUE
        WHEN UPPER(TRIM(COALESCE(authentication_flow, ''))) = 'FRICTIONLESS' THEN FALSE
        ELSE NULL
    END AS is_successful_frictionless,
    
    -- DATABRICKS DERIVED COLUMNS - Successful authentication (complex logic) (FIXED CASE SENSITIVITY)
    CASE 
        WHEN UPPER(TRIM(COALESCE(threed_flow_status, ''))) = '3D_SUCCESS' 
          OR (UPPER(TRIM(COALESCE(authentication_flow, ''))) = 'FRICTIONLESS' AND TRIM(COALESCE(status, '')) = '40') THEN TRUE
        WHEN (TRIM(COALESCE(acs_url, '')) IS NOT NULL AND TRIM(COALESCE(acs_url, '')) != '' AND UPPER(TRIM(COALESCE(authentication_flow, ''))) != 'EXEMPTION')
          OR (UPPER(TRIM(COALESCE(authentication_flow, ''))) = 'FRICTIONLESS' AND TRIM(COALESCE(status, '')) != '40' AND TRIM(COALESCE(status, '')) != '') THEN FALSE
        ELSE NULL
    END AS is_successful_authentication,
    
    -- DATABRICKS DERIVED COLUMNS - High-level approval/decline logic (FIXED - now references status flags)
    CASE 
        WHEN auth_status = TRUE OR sale_status = TRUE THEN TRUE
        WHEN auth_status = FALSE OR sale_status = FALSE THEN FALSE
        ELSE NULL
    END AS is_approved,
    
    CASE 
        WHEN UPPER(TRIM(COALESCE(transaction_type, ''))) IN ('SALE', 'AUTH') AND TRIM(COALESCE(transaction_result_id, '')) = '1008' THEN TRUE
        WHEN auth_status IS NOT NULL OR sale_status IS NOT NULL THEN FALSE
        ELSE NULL
    END AS is_declined,
    
    -- String cleaning - exact Databricks approach using actual columns
    CASE 
        WHEN TRIM(COALESCE(transaction_type, '')) = '' THEN NULL
        ELSE UPPER(TRIM(REGEXP_REPLACE(COALESCE(transaction_type, ''), '[^A-Za-z0-9\\s]', '')))
    END AS transaction_type,
    
    CASE 
        WHEN TRIM(COALESCE(multi_client_name, '')) = '' THEN NULL
        ELSE TRIM(REGEXP_REPLACE(COALESCE(multi_client_name, ''), '[^A-Za-z0-9\\s]', ''))
    END AS multi_client_name,
    
    CASE 
        WHEN TRIM(COALESCE(final_transaction_status, '')) = '' THEN NULL
        ELSE UPPER(TRIM(REGEXP_REPLACE(COALESCE(final_transaction_status, ''), '[^A-Za-z0-9\\s]', '')))
    END AS final_transaction_status,
    
    CASE 
        WHEN TRIM(COALESCE(card_scheme, '')) = '' THEN NULL
        ELSE UPPER(TRIM(REGEXP_REPLACE(COALESCE(card_scheme, ''), '[^A-Za-z0-9\\s]', '')))
    END AS card_scheme,
    
    -- Core Databricks fields we need for perfect parity
    transaction_result_id,
    threed_flow_status AS three_ds_flow_status,  -- Map bronze->silver column names
    challenge_preference,
    authentication_flow,
    status,
    acs_url,
    transaction_id_life_cycle,
    decline_reason,
    
    -- MISSING CORE COLUMNS - Adding all 100+ missing columns from Databricks schema
    transaction_date_life_cycle,
    transaction_type_id,
    preference_reason,
    
    -- 3D Secure columns (using actual bronze column names)
    threed_flow_status AS "3d_flow_status",  -- Databricks expects this name
    threed_flow AS "3d_flow",  -- Databricks expects this name
    CASE 
        WHEN LOWER(TRIM(COALESCE(liability_shift, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(liability_shift, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS liability_shift,
    acs_res_authentication_status,
    r_req_authentication_status,
    transaction_status_reason,
    interaction_counter,
    challenge_cancel,
    three_ds_method_indication,
    manage_3d_decision,    -- Financial columns
    rate_usd,
    currency_code,
    three_ds_protocol_version,
    
    -- Device and channel columns
    rebill,
    device_channel,
    user_agent_3d,
    device_type,
    device_name,
    device_os,
    challenge_window_size,
    type_of_authentication_method,
    
    -- Client identification columns
    multi_client_id,
    client_id,
    client_name,
    industry_code,
    
    -- Card information columns
    credit_card_id,
    cccid,
    bin,
    card_type,
    consumer_id,
    issuer_bank_name,
    device_channel_name,
    bin_country,
    
    -- Geographic and regulatory columns
    CASE 
        WHEN LOWER(TRIM(COALESCE(is_eea, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(is_eea, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS is_eea,
    region,
    payment_instrument,
    source_application,
    
    -- Partial amount processing columns
    CASE 
        WHEN LOWER(TRIM(COALESCE(is_partial_amount, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(is_partial_amount, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS is_partial_amount,
    CASE 
        WHEN LOWER(TRIM(COALESCE(enable_partial_approval, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(enable_partial_approval, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS enable_partial_approval,
    CASE 
        WHEN LOWER(TRIM(COALESCE(partial_approval_is_void, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(partial_approval_is_void, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS partial_approval_is_void,
    partial_approval_void_id,
    partial_approval_void_time,
    partial_approval_requested_amount,
    partial_approval_requested_currency,
    partial_approval_processed_amount,
    partial_approval_processed_currency,
    COALESCE(TRY_CAST(partial_approval_processed_amount_in_usd AS DECIMAL(18,2)), 0) AS partial_approval_processed_amount_in_usd,
    
    -- Website and browser columns
    website_id,
    browser_user_agent,
    ip_country,
    processor_id,
    processor_name,
    
    -- Risk and fraud columns
    risk_email_id,
    CASE 
        WHEN LOWER(TRIM(COALESCE(is_currency_converted, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(is_currency_converted, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS is_currency_converted,
    TRY_CAST(email_seniority_start_date AS TIMESTAMP) AS email_seniority_start_date,
    email_payment_attempts,
    final_fraud_decision_id,
    
    -- Token and security columns
    external_token_eci,
    risk_threed_eci,
    threed_eci,
    cvv_code,
    provider_response_code,
    issuer_card_program_id,
    
    -- Transaction flow columns
    scenario_id,
    previous_id,
    next_id,
    step,
    reprocess_3d_reason,
    data_only_authentication_result,
    CASE 
        WHEN LOWER(TRIM(COALESCE(is_cascaded_after_data_only_authentication, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(is_cascaded_after_data_only_authentication, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS is_cascaded_after_data_only_authentication,
    next_action,
    authentication_method,
    cavv_verification_code,
    channel,
    
    -- Authentication request/response columns
    authentication_request,
    authentication_response,
    
    -- Card details columns
    cc_hash,
    TRY_CAST(exp_date AS TIMESTAMP) AS exp_date,
    message_version_3d,
    TRY_CAST(cc_seniority_start_date AS TIMESTAMP) AS cc_seniority_start_date,
    mc_scheme_token_used,
    stored_credentials_mode,
    avs_code,
    credit_type_id,
    subscription_step,
    
    -- Token fetching columns
    scheme_token_fetching_result,
    browser_screen_height,
    browser_screen_width,
    filter_reason_id,
    reason_code,
    reason,
    
    -- Service timestamp columns
    request_timestamp_service,
    token_unique_reference_service,
    response_timestamp_service,
    api_type_service,
    request_timestamp_fetching,
    token_unique_reference_fetching,
    response_timestamp_fetching,
    api_type_fetching,
    
    -- Token processing flags
    CASE 
        WHEN LOWER(TRIM(COALESCE(is_cryptogram_fetching_skipped, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(is_cryptogram_fetching_skipped, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS is_cryptogram_fetching_skipped,
    CASE 
        WHEN LOWER(TRIM(COALESCE(is_external_scheme_token, ''))) IN ('yes', 'true', '1') THEN TRUE
        WHEN LOWER(TRIM(COALESCE(is_external_scheme_token, ''))) IN ('no', 'false', '0', '') THEN FALSE
        ELSE NULL
    END AS is_external_scheme_token,
    
    -- 3DS server and gateway columns
    three_ds_server_trans_id,
    gateway_id,
    cc_request_type_id,
    upo_id,
    
    -- Additional boolean flags (fix column names from bronze)
    iscardReplaced AS IsCardReplaced,
    isvdcuFeeApplied AS IsVdcuFeeApplied,
    aftType AS AftType,
    secondarycccid,
    
    -- Duration columns
    transaction_duration,
    authorization_req_duration,
    
    -- Installment columns (fix column names from bronze)
    firstInstallment AS FirstInstallment,
    periodicalInstallment AS PeriodicalInstallment,
    numberOfInstallments,
    installmentProgram AS InstallmentProgram,
    installmentFundingType AS InstallmentFundingType,
    COALESCE(TRY_CAST(first_installment_usd AS DECIMAL(18,2)), 0) AS first_installment_usd,
    COALESCE(TRY_CAST(periodical_installment_usd AS DECIMAL(18,2)), 0) AS periodical_installment_usd,
    
    -- Advanced processing columns (fix column names from bronze)
    applicableScenarios AS ApplicableScenarios,
    cascading_ab_test_experimant_name,
    
    -- Integer flags (Databricks specific) - Add missing ones as NULL
    NULL AS IsOnlineRefund,
    NULL AS IsNoCVV, 
    NULL AS IsSupportedOCT,
    
    -- Transaction type and merchant columns - Add missing ones as NULL
    NULL AS ExternalTokenTrasactionType,
    NULL AS SubscriptionType,
    NULL AS MerchantCountryCodeNum,
    NULL AS MCMerchantAdviceCode,
    NULL AS AcquirerBinCountryId,
    NULL AS AcquirerBin,
    
    -- Regulatory compliance flags - Add missing ones as NULL
    NULL AS IsPSD2,
    NULL AS IsSCAScope,
    NULL AS IsAirline,
    NULL AS RequestedCCCID,
    
    -- Final geographic column - Add missing as NULL
    NULL AS merchant_country,
    
    -- Numeric fields using actual columns - now proper STRING columns from bronze
    COALESCE(TRY_CAST(amount_in_usd AS DECIMAL(18,2)), 0) AS amount_in_usd,
    COALESCE(TRY_CAST(approved_amount_in_usd AS DECIMAL(18,2)), 0) AS approved_amount_in_usd,
    COALESCE(TRY_CAST(original_currency_amount AS DECIMAL(18,2)), 0) AS original_currency_amount,
    
    -- Metadata (keep at the end)
    inserted_at
    
FROM status_flags_calculated
ORDER BY transaction_date, transaction_main_id;	187.199000	3.12	0.000210	0.000630	2025-09-15 02:59:16.849 -0700	SUCCESS
01bf1097-0000-323c-002c-770b00117ab2	X_SMALL_2_GEN	USE SECONDARY ROLES ALL	0.002000	0.00	0.000000	0.000000	2025-09-15 02:59:16.796 -0700	SUCCESS
01bf1097-0000-323c-002c-770b00117aae	X_SMALL_2_GEN	DROP TABLE IF EXISTS IDENTIFIER($TARGET_TABLE);	0.030000	0.00	0.000010	0.000030	2025-09-15 02:59:15.762 -0700	SUCCESS
01bf1097-0000-325e-002c-770b001169ae	X_SMALL_2_GEN	SET TARGET_TABLE = 'POC.PUBLIC.NCP_SILVER_V3';	0.011000	0.00	0.000006	0.000018	2025-09-15 02:59:14.826 -0700	SUCCESS
01bf1097-0000-31b3-002c-770b0011f1e2	X_SMALL_2_GEN	SET SOURCE_TABLE = 'POC.PUBLIC.NCP_BRONZE_V3';	0.010000	0.00	0.000006	0.000018	2025-09-15 02:59:13.968 -0700	SUCCESS
01bf1097-0000-32de-002c-770b0011e2e6	X_SMALL_2_GEN	SET DATE_RANGE_END = '2025-09-05';	0.011000	0.00	0.000005	0.000015	2025-09-15 02:59:13.544 -0700	SUCCESS
01bf1097-0000-3129-002c-770b0011b49a	X_SMALL_2_GEN	SET DATE_RANGE_START = '2025-09-05';	0.011000	0.00	0.000005	0.000015	2025-09-15 02:59:13.052 -0700	SUCCESS
01bf1095-0000-32de-002c-770b0011e2de	X_SMALL_2_GEN	CREATE TABLE poc.public.ncp_bronze_v3 AS
WITH parsed_data AS (
  SELECT 
    filename,
    loaded_at as inserted_at,
    SPLIT(raw_line, '\t') AS cols,
    raw_line
  FROM poc.public.ncp_bronze_staging_v3
  WHERE raw_line IS NOT NULL 
    AND raw_line != ''
    AND LENGTH(raw_line) > 100
)
SELECT 
    filename,
    inserted_at,
    
    cols[0]::STRING AS transaction_main_id,
    TRY_TO_TIMESTAMP(cols[1]::STRING) AS transaction_date,
    cols[2]::STRING AS transaction_id_life_cycle,
    TRY_TO_TIMESTAMP(cols[3]::STRING) AS transaction_date_life_cycle,
    cols[4]::STRING AS transaction_type_id,
    cols[5]::STRING AS transaction_type,
    cols[6]::STRING AS transaction_result_id,
    cols[7]::STRING AS final_transaction_status,
    cols[8]::STRING AS threed_flow_status,
    cols[9]::STRING AS challenge_preference,
    cols[10]::STRING AS preference_reason,
    cols[11]::STRING AS authentication_flow,
    cols[12]::STRING AS threed_flow,
    cols[13]::STRING AS is_void,
    cols[14]::STRING AS liability_shift,
    cols[15]::STRING AS status,
    cols[16]::STRING AS acs_url,
    cols[17]::STRING AS acs_res_authentication_status,
    cols[18]::STRING AS r_req_authentication_status,
    cols[19]::STRING AS transaction_status_reason,
    cols[20]::STRING AS interaction_counter,
    cols[21]::STRING AS challenge_cancel,
    cols[22]::STRING AS three_ds_method_indication,
    cols[23]::STRING AS is_sale_3d,
    cols[24]::STRING AS manage_3d_decision,
    cols[25]::STRING AS decline_reason,
    cols[26]::STRING AS amount_in_usd,
    cols[27]::STRING AS approved_amount_in_usd,
    cols[28]::STRING AS original_currency_amount,
    cols[29]::STRING AS rate_usd,
    cols[30]::STRING AS currency_code,
    cols[31]::STRING AS three_ds_protocol_version,
    cols[32]::STRING AS is_external_mpi,
    cols[33]::STRING AS rebill,
    cols[34]::STRING AS device_channel,
    cols[35]::STRING AS user_agent_3d,
    cols[36]::STRING AS device_type,
    cols[37]::STRING AS device_name,
    cols[38]::STRING AS device_os,
    cols[39]::STRING AS challenge_window_size,
    cols[40]::STRING AS type_of_authentication_method,
    cols[41]::STRING AS multi_client_id,
    cols[42]::STRING AS client_id,
    cols[43]::STRING AS multi_client_name,
    cols[44]::STRING AS client_name,
    cols[45]::STRING AS industry_code,
    cols[46]::STRING AS credit_card_id,
    cols[47]::STRING AS cccid,
    cols[48]::STRING AS bin,
    cols[49]::STRING AS is_prepaid,
    cols[50]::STRING AS card_scheme,
    cols[51]::STRING AS card_type,
    cols[52]::STRING AS consumer_id,
    cols[53]::STRING AS issuer_bank_name,
    cols[54]::STRING AS device_channel_name,
    cols[55]::STRING AS bin_country,
    cols[56]::STRING AS is_eea,
    cols[57]::STRING AS region,
    cols[58]::STRING AS payment_instrument,
    cols[59]::STRING AS source_application,
    cols[60]::STRING AS is_partial_amount,
    cols[61]::STRING AS enable_partial_approval,
    cols[62]::STRING AS partial_approval_is_void,
    cols[63]::STRING AS partial_approval_void_id,
    cols[64]::STRING AS partial_approval_void_time,
    cols[65]::STRING AS partial_approval_requested_amount,
    cols[66]::STRING AS partial_approval_requested_currency,
    cols[67]::STRING AS partial_approval_processed_amount,
    cols[68]::STRING AS partial_approval_processed_currency,
    cols[69]::STRING AS partial_approval_processed_amount_in_usd,
    cols[70]::STRING AS website_id,
    cols[71]::STRING AS browser_user_agent,
    cols[72]::STRING AS ip_country,
    cols[73]::STRING AS processor_id,
    cols[74]::STRING AS processor_name,
    cols[75]::STRING AS risk_email_id,
    cols[76]::STRING AS is_currency_converted,
    cols[77]::STRING AS email_seniority_start_date,
    cols[78]::STRING AS email_payment_attempts,
    cols[79]::STRING AS final_fraud_decision_id,
    cols[80]::STRING AS external_token_eci,
    cols[81]::STRING AS risk_threed_eci,
    cols[82]::STRING AS threed_eci,
    cols[83]::STRING AS cvv_code,
    cols[84]::STRING AS provider_response_code,
    cols[85]::STRING AS issuer_card_program_id,
    cols[86]::STRING AS scenario_id,
    cols[87]::STRING AS previous_id,
    cols[88]::STRING AS next_id,
    cols[89]::STRING AS step,
    cols[90]::STRING AS reprocess_3d_reason,
    cols[91]::STRING AS data_only_authentication_result,
    cols[92]::STRING AS is_cascaded_after_data_only_authentication,
    cols[93]::STRING AS next_action,
    cols[94]::STRING AS authentication_method,
    cols[95]::STRING AS cavv_verification_code,
    cols[96]::STRING AS channel,
    cols[97]::STRING AS authentication_request,
    cols[98]::STRING AS authentication_response,
    cols[99]::STRING AS cc_hash,
    cols[100]::STRING AS exp_date,
    cols[101]::STRING AS message_version_3d,
    cols[102]::STRING AS cc_seniority_start_date,
    cols[103]::STRING AS mc_scheme_token_used,
    cols[104]::STRING AS stored_credentials_mode,
    cols[105]::STRING AS avs_code,
    cols[106]::STRING AS is_3d,
    cols[107]::STRING AS credit_type_id,
    cols[108]::STRING AS subscription_step,
    cols[109]::STRING AS scheme_token_fetching_result,
    cols[110]::STRING AS browser_screen_height,
    cols[111]::STRING AS browser_screen_width,
    cols[112]::STRING AS filter_reason_id,
    cols[113]::STRING AS reason_code,
    cols[114]::STRING AS reason,
    cols[115]::STRING AS request_timestamp_service,
    cols[116]::STRING AS token_unique_reference_service,
    cols[117]::STRING AS response_timestamp_service,
    cols[118]::STRING AS api_type_service,
    cols[119]::STRING AS request_timestamp_fetching,
    cols[120]::STRING AS token_unique_reference_fetching,
    cols[121]::STRING AS response_timestamp_fetching,
    cols[122]::STRING AS api_type_fetching,
    cols[123]::STRING AS is_cryptogram_fetching_skipped,
    cols[124]::STRING AS is_external_scheme_token,
    cols[125]::STRING AS three_ds_server_trans_id,
    cols[126]::STRING AS gateway_id,
    cols[127]::STRING AS cc_request_type_id,
    cols[128]::STRING AS upo_id,
    cols[129]::STRING AS iscardReplaced,
    cols[130]::STRING AS isvdcuFeeApplied,
    cols[131]::STRING AS aftType,
    cols[132]::STRING AS secondarycccid,
    cols[133]::STRING AS transaction_duration,
    cols[134]::STRING AS authorization_req_duration,
    cols[135]::STRING AS firstInstallment,
    cols[136]::STRING AS periodicalInstallment,
    cols[137]::STRING AS numberOfInstallments,
    cols[138]::STRING AS installmentProgram,
    cols[139]::STRING AS installmentFundingType,
    cols[140]::STRING AS first_installment_usd,
    cols[141]::STRING AS periodical_installment_usd,
    cols[142]::STRING AS applicableScenarios,
    cols[143]::STRING AS cascading_ab_test_experimant_name,
    
    raw_line
    
FROM parsed_data;	99.727000	1.66	0.000102	0.000306	2025-09-15 02:57:29.694 -0700	SUCCESS
01bf1095-0000-323c-002c-770b00117a9e	X_SMALL_2_GEN	USE SECONDARY ROLES ALL	0.002000	0.00	0.000000	0.000000	2025-09-15 02:57:29.652 -0700	SUCCESS
01bf1095-0000-32de-002c-770b0011e2da	X_SMALL_2_GEN	DROP TABLE IF EXISTS poc.public.ncp_bronze_v3;	0.032000	0.00	0.000010	0.000030	2025-09-15 02:57:29.198 -0700	SUCCESS
01bf1094-0000-32de-002c-770b0011e2ce	X_SMALL_2_GEN	COPY INTO poc.public.ncp_bronze_staging_v3 (filename, loaded_at, raw_line)
FROM (
    SELECT
        METADATA$FILENAME::string,
        CURRENT_TIMESTAMP,
        $1::string
    FROM @NCP/bpa.STP_BusinessAnalyticsQuery/
)
PATTERN = 'file2-bpa.STP_BusinessAnalyticsQuery-2025-09-05.*' 
FILE_FORMAT = (FORMAT_NAME = 'txt_format_raw') 
ON_ERROR = CONTINUE;	39.385000	0.66	0.000449	0.001347	2025-09-15 02:56:43.893 -0700	SUCCESS
01bf1094-0000-325e-002c-770b001169a6	X_SMALL_2_GEN	CREATE OR REPLACE FILE FORMAT txt_format_raw
TYPE = 'CSV' 
FIELD_DELIMITER = NONE  -- No field delimiter - entire line is one field
SKIP_HEADER = 0 
ENCODING = 'ISO-8859-1' 
ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE;	0.031000	0.00	0.000009	0.000027	2025-09-15 02:56:43.262 -0700	SUCCESS